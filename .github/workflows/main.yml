name: Test, Build, and Deploy to Azure

# Trigger this workflow on every push and pull request to any branch
on:
  push:
    branches: [ "**" ] # Runs on pushes to all branches
  pull_request:
    branches: [ "main" ] # Runs on pull requests targeting the main branch

env:
  AZURE_WEBAPP_NAME: 'simple-notes-app'   # Change this to your Azure App Service name
  AZURE_REGISTRY_URL: 'simplenotesacr.azurecr.io' # Change this to your Azure Container Registry URL
  IMAGE_NAME: 'simple-notes-app'

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 'Install Dependencies'
        run: npm install
        working-directory: ./notes-app # Run in the frontend folder

      - name: 'Run Tests'
        run: npm test
        working-directory: ./notes-app # Run in the frontend folder

  build-and-deploy:
    # This job now depends on the 'test' job succeeding
    needs: test
    # This condition ensures deployment ONLY happens on a push to the main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository code
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      # 2. Log in to the Azure Container Registry (ACR)
      - name: 'Log in to Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_REGISTRY_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 3. Build and push the Docker image to ACR
      - name: 'Build and push Docker image'
        run: |
          docker build . -t ${{ env.AZURE_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.AZURE_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # 4. Log in to Azure to deploy
      - name: 'Log in to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 5. Deploy the new image to Azure App Service
      - name: 'Deploy to Azure App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: '${{ env.AZURE_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          # Here we are setting the Environment Variables for our production app!
          app-settings-json: '{ "PORT": "8080", "DATABASE_URL": "${{ secrets.PROD_DATABASE_URL }}" }'